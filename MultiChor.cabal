cabal-version:      3.0
name:               MultiChor
version:            1.1.0.0
license-files:
    , LICENSE
    , LICENSE.inherited
license:            BSD-3-Clause
maintainer: mako.bates@uvm.edu
category: Distributed-Computing
synopsis: Type-safe and efficient choreographies with location-set polymorphism.
description:
    MultiChor is a library for functional choreographic programming in Haskell.

tested-with:
    GHC == 9.4.8, GHC == 9.10.1

extra-doc-files:
    README.md

source-repository head
  type:     git
  location: https://github.com/ShapeOfMatter/MultiChor


common basic-config
    default-language: GHC2021
    build-depends:
        , base                 >= 4.16 && < 5
        , bytestring           >= 0.11 && < 0.13
        , http-client          >= 0.7  && < 0.8
        , mtl                  >= 2.2.2 && < 3.0
        , servant              >= 0.19 && < 0.21
        , servant-client       >= 0.19 && < 0.21
        , servant-server       >= 0.19 && < 0.21
        , template-haskell     >= 2.18 && < 2.23
        , unordered-containers >= 0.2  && < 0.3
        , warp                 >= 3.3  && < 3.4
    ghc-options:
      -Wall
      -Wno-incomplete-uni-patterns
      -fprint-potential-instances
      -haddock
      -Winvalid-haddock
    default-extensions: BlockArguments
                       ,DataKinds
                       ,ExplicitNamespaces
                       ,FunctionalDependencies
                       ,GADTs
                       ,ImpredicativeTypes
                       ,LambdaCase
                       ,LiberalTypeSynonyms
                       ,TypeFamilies

library
    import: basic-config
    hs-source-dirs:   src
    exposed-modules:
        Choreography
        Choreography.Choreography
        Choreography.Choreography.Batteries
        Choreography.Core
        Choreography.Locations
        Choreography.Locations.Batteries
        Choreography.Network
        Choreography.Network.Http
        Choreography.Network.Local
        Choreography.Polymorphism
        Control.Monad.Freer

